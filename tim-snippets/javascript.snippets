priority 1


snippet hc "HotFX Component" b

class HotFX$1 extends HTMLElement {

	static observedAttributes = ['',]

	constructor() {
		super()
		this.attachShadow({ mode: 'open' })
	}

	attributeChangedCallback() {
	}

}

customElements.define('hotfx-$2', HotFX$1)

endsnippet

snippet cl "console.log" b
console.log('--> $1', $1)
endsnippet

snippet tc "Test Case" b
test.skip('$1', async () => {
	//
})

endsnippet

snippet tb "React Test Boilerplate" b
	api.get.mockReturnValueOnce([Promise.resolve()])
	await act(async () => {
		const { getByText } = render(
			<${1:`!v expand('%:t:r')[:-6]`} />,
			{ wrapper: MemoryRouter },
		)
		await wait(() => expect(getByText('$2')).toBeInTheDocument())
		expect(api.get).toHaveBeenCalledWith('$3')
	})
endsnippet

snippet rt "React Test" b
import { render, act, cleanup } from '@testing-library/react'
import { wait } from '@testing-library/dom'
import { MemoryRouter } from 'react-router-dom'
import ${1:`!v expand('%:t:r')[:-6]`} from './$1.jsx'
import * as api from '../api.js'
import APIError from '../APIError.js'

afterEach(cleanup)

endsnippet

snippet ia "import api" b
import * as api from './api.js'
endsnippet


snippet ir "import React" b
import React from 'react'
endsnippet


snippet ip "import PropTypes" b
import PropTypes from 'prop-types'
endsnippet


snippet t "Jest test" b
import { ${1:`!p snip.rv = snip.basename[0:-5]`} } from './${2:$1}.jsx'

test.skip('$2', () => {
	expect(shallow(<$2 />)).toMatchSnapshot()
})

endsnippet

